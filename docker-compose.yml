# 🌟 Docker Compose Configuration 🌟
# ================================

version: "3.8"

services:
  # 🐘 PostgreSQL Database Service 🐘
  # ================================
  postgres:
    image: postgres:16-alpine
    container_name: sailmail_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - sailmail_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s


  # ⚡️ Redis Cache Service ⚡️
  # ========================
  redis:
    image: redis:7-alpine
    container_name: sailmail_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - sailmail_network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD} ping | grep PONG"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s


  # 🚀 Main Application Service 🚀
  # ============================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=${NODE_ENV}
    container_name: sailmail_app
    restart: unless-stopped
    command: sh -c "bunx prisma migrate deploy && bun run start"
    env_file:
      - .env.local
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
    volumes:
      - ./uploads:/app/uploads
      - ./public:/app/public
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sailmail_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s


  # 🔒 Nginx Reverse Proxy Service 🔒
  # ===============================
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: sailmail_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:rw
      - ./nginx/auto-ssl:/etc/resty-auto-ssl:rw
      - ./nginx/logs:/var/log/nginx:rw
    environment:
      - NGINX_HOST=${DOMAIN:-localhost}
      - NGINX_PORT=80
      - SSL_EMAIL=${ACME_EMAIL}
      - SSL_STAGING=${ACME_STAGING:-true}
    depends_on:
      app:
        condition: service_healthy
    networks:
      - sailmail_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    ulimits:
      nofile:
        soft: 65536
        hard: 65536


# 💾 Persistent Data Volumes 💾
# ==========================
volumes:
  postgres_data:
    name: sailmail_postgres_data
  redis_data:
    name: sailmail_redis_data


# 🌐 Docker Networks 🌐
# ===================
networks:
  sailmail_network:
    name: sailmail_network
    driver: bridge
