generator client {
  provider      = "prisma-client-js"
  output        = "../@prisma/client"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EmailTemplate {
  id         String        @id @default(cuid())
  name       String
  subject    String
  content    String?       @db.Text
  variables  String[]      @default([])
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  teamId     String
  team       Team          @relation(fields: [teamId], references: [id])
  campaigns  Campaign[]
  sentEmails SentEmail[]
  category   EmailCategory @relation(fields: [categoryId], references: [id])
  categoryId String
  html       String?       @db.Text
  design     Json?

  @@index([teamId])
  @@index([categoryId])
}

model User {
  id          String       @id @default(cuid())
  name        String?
  email       String       @unique
  password    String
  role        UserRole     @default(USER)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  status      UserStatus   @default(ACTIVE)
  teamId      String?
  team        Team?        @relation(fields: [teamId], references: [id])
  invitesSent TeamInvite[] @relation("Inviter")

  @@index([teamId])
}

model Team {
  id              String          @id @default(cuid())
  name            String
  logoUrl         String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  emailTemplateId String?
  users           User[]
  invites         TeamInvite[]
  templates       EmailTemplate[]
  lists           MailingList[]
  automations     Automation[]
  campaigns       Campaign[]
  apiKeys         ApiKey[]
  smtpConfigs     SmtpConfig[]
  sentEmails      SentEmail[]
  customDomains   CustomDomain[]

  @@index([id])
}

model TeamInvite {
  id        String       @id @default(cuid())
  teamId    String
  team      Team         @relation(fields: [teamId], references: [id])
  inviterId String
  inviter   User         @relation("Inviter", fields: [inviterId], references: [id])
  status    InviteStatus @default(PENDING)
  expiresAt DateTime
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  email     String
  name      String

  @@index([teamId])
  @@index([inviterId])
}

model ApiKey {
  id         String        @id @default(cuid())
  name       String
  key        String        @unique
  teamId     String
  team       Team          @relation(fields: [teamId], references: [id])
  lastUsedAt DateTime?
  expiresAt  DateTime?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  scopes     String[]      @default([])
  rateLimit  Int           @default(1000) // Requests per hour
  isActive   Boolean       @default(true)
  usageStats ApiKeyUsage[]

  @@index([teamId])
  @@index([key])
}

model ApiKeyUsage {
  id        String   @id @default(cuid())
  apiKeyId  String
  apiKey    ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  endpoint  String
  method    String
  timestamp DateTime @default(now())
  success   Boolean  @default(true)
  error     String?
  ipAddress String?
  userAgent String?

  @@index([apiKeyId])
  @@index([timestamp])
}

model Campaign {
  id                String                     @id @default(cuid())
  name              String
  description       String?                    @db.Text
  templateId        String
  template          EmailTemplate              @relation(fields: [templateId], references: [id])
  teamId            String
  team              Team                       @relation(fields: [teamId], references: [id])
  status            CampaignStatus             @default(DRAFT)
  scheduledFor      DateTime?
  schedule          CampaignSchedule?
  listId            String
  recurringSchedule CampaignRecurringSchedule?
  cronExpression    String?
  mailingList       MailingList                @relation(fields: [listId], references: [id])
  sentEmails        SentEmail[]
  analytics         CampaignAnalytics?
  smtpConfigId      String?
  smtpConfig        SmtpConfig?                @relation(fields: [smtpConfigId], references: [id])
  emailJobs         EmailJob[]
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt

  @@index([templateId])
  @@index([teamId])
  @@index([listId])
}

enum CampaignSchedule {
  ONE_TIME
  RECURRING
}

enum CampaignRecurringSchedule {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

model MailingList {
  id          String       @id @default(cuid())
  name        String
  description String?      @db.Text
  teamId      String
  team        Team         @relation(fields: [teamId], references: [id])
  subscribers Subscriber[]
  campaigns   Campaign[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([teamId])
}

model Subscriber {
  id             String           @id @default(cuid())
  email          String
  firstName      String?
  lastName       String?
  phone          String?
  company        String?
  title          String?
  address        String?
  addressLine2   String?
  city           String?
  state          String?
  postalCode     String?
  country        String?
  metadata       Json? // For any additional custom fields
  tags           String[] // For categorizing subscribers
  customFields   Json? // For structured custom fields
  source         String? // How the subscriber was added (import, form, api, etc.)
  listId         String
  mailingList    MailingList      @relation(fields: [listId], references: [id])
  status         SubscriberStatus @default(ACTIVE)
  unsubscribedAt DateTime?
  lastActivityAt DateTime? // Last interaction (open, click, etc.)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  sentEmails     SentEmail[]

  @@unique([email, listId])
  @@index([listId])
  @@index([email])
  @@index([status])
  @@index([lastActivityAt])
}

model SentEmail {
  id           String          @id @default(cuid())
  templateId   String?
  template     EmailTemplate?  @relation(fields: [templateId], references: [id])
  campaignId   String?
  campaign     Campaign?       @relation(fields: [campaignId], references: [id])
  recipient    String
  subject      String
  content      String?         @db.Text
  status       EmailStatus     @default(PENDING)
  sentAt       DateTime        @default(now())
  openedAt     DateTime?
  clickedAt    DateTime?
  teamId       String
  team         Team            @relation(fields: [teamId], references: [id])
  error        String?         @db.Text
  metadata     Json?
  jobId        String?
  emailJob     EmailJob?       @relation(fields: [jobId], references: [id])
  subscriberId String?
  subscriber   Subscriber?     @relation(fields: [subscriberId], references: [id])
  tracking     EmailTracking[]

  @@index([templateId])
  @@index([campaignId])
  @@index([teamId])
  @@index([jobId])
  @@index([subscriberId])
}

model EmailTracking {
  id          String       @id @default(cuid())
  sentEmailId String
  sentEmail   SentEmail    @relation(fields: [sentEmailId], references: [id])
  type        TrackingType
  createdAt   DateTime     @default(now())
}

enum TrackingType {
  CLICKED
  OPENED
  BOUNCED
  FAILED
}

model EmailJob {
  id              String        @id @default(cuid())
  campaignId      String?
  campaign        Campaign?     @relation(fields: [campaignId], references: [id])
  status          JobStatus     @default(QUEUED)
  totalEmails     Int
  processedEmails Int           @default(0)
  startedAt       DateTime?
  completedAt     DateTime?
  error           String?       @db.Text
  sentEmails      SentEmail[]
  logs            EmailJobLog[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([campaignId])
}

model EmailJobLog {
  id        String   @id @default(cuid())
  jobId     String
  emailJob  EmailJob @relation(fields: [jobId], references: [id])
  level     LogLevel
  message   String   @db.Text
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([jobId])
}

model CampaignAnalytics {
  id               String   @id @default(cuid())
  campaignId       String   @unique
  campaign         Campaign @relation(fields: [campaignId], references: [id])
  sentCount        Int      @default(0)
  openCount        Int      @default(0)
  clickCount       Int      @default(0)
  bounceCount      Int      @default(0)
  unsubscribeCount Int      @default(0)
  lastUpdated      DateTime @updatedAt
}

model EmailCategory {
  id          String          @id @default(cuid())
  name        String          @unique
  description String?         @db.Text
  templates   EmailTemplate[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum UserRole {
  ADMIN
  USER
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
  OPENED
  CLICKED
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  COMPLETED
  FAILED
  PAUSED
}

enum SubscriberStatus {
  ACTIVE
  UNSUBSCRIBED
  BOUNCED
  COMPLAINED
}

enum JobStatus {
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum LogLevel {
  INFO
  WARNING
  ERROR
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model SmtpConfig {
  id        String     @id @default(cuid())
  provider  String     @default("custom")
  host      String
  port      String
  username  String
  password  String
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  campaigns Campaign[]
  teamId    String
  team      Team       @relation(fields: [teamId], references: [id])

  @@unique([teamId, provider])
  @@index([teamId])
}

model Automation {
  id          String               @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  isActive    Boolean              @default(true)
  teamId      String
  team        Team                 @relation(fields: [teamId], references: [id])
  nodes       AutomationNode[]
  edges       AutomationNodeEdge[]

  @@index([teamId])
}

model AutomationNode {
  id           String               @id @default(cuid())
  automationId String
  automation   Automation           @relation(fields: [automationId], references: [id])
  type         NodeType
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  edgesFrom    AutomationNodeEdge[] @relation("Source")
  edgesTo      AutomationNodeEdge[] @relation("Target")
  data         Json?
}

model AutomationNodeEdge {
  id           String         @id @default(cuid())
  automationId String
  automation   Automation     @relation(fields: [automationId], references: [id])
  sourceId     String
  source       AutomationNode @relation("Source", fields: [sourceId], references: [id])
  targetId     String
  target       AutomationNode @relation("Target", fields: [targetId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  label    String?
  animated Boolean @default(true)
}

enum NodeType {
  START
  EMAIL // Send email using EmailTemplate
  WAIT // Simple delay
  CONDITION // Branch based on conditions
  WEBHOOK // Call external webhook
  ADD_TO_LIST // Add subscriber to MailingList
  REMOVE_FROM_LIST // Remove subscriber from MailingList 
  UPDATE_SUBSCRIBER // Update Subscriber fields
  CHECK_ENGAGEMENT // Check if subscriber opened/clicked
  SEGMENT // Filter subscribers based on criteria
  TAG // Add/remove tags from subscriber
  UNSUBSCRIBE // Mark subscriber as unsubscribed
  CUSTOM_CODE // Run custom code
  EXIT // End automation branch
}

model CustomDomain {
  id                String    @id @default(cuid())
  domain            String    @unique
  sslStatus         String    @default("pending") // pending, active, failed
  sslCertificate    String? // SSL certificate details
  sslPrivateKey     String?   @db.Text // SSL private key (encrypted)
  sslExpiresAt      DateTime? // SSL certificate expiration date
  verificationToken String    @default(cuid()) // For domain verification
  dnsChallenge      String?   @db.Text // For ACME DNS challenge
  dnsChallengeToken String? // For ACME DNS challenge token
  isVerified        Boolean   @default(false)
  isActive          Boolean   @default(false)
  team              Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId            String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([teamId])
  @@index([domain])
}
